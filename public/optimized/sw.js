const CACHE_NAME="reserva-tu-cancha-v1",STATIC_CACHE="static-v1",DYNAMIC_CACHE="dynamic-v1",STATIC_ASSETS=["/","/index.html","/styles.css","/script.js","/assets/css/styles.css","/assets/js/payment.js","/js/chart.min.js","/js/notification-system.js","/js/time-utils.js","/js/url-config.js","/images/logos/borde-rio.png","/images/logos/demo3-new-life-galilea.png"];async function handleRequest(e){const t=new URL(e.url);try{return isStaticAsset(t.pathname)?await cacheFirst(e,"static-v1"):isHTMLRequest(e)?await networkFirst(e,"dynamic-v1"):isAPIRequest(t.pathname)?await staleWhileRevalidate(e,"dynamic-v1"):await fetch(e)}catch(t){return console.error("‚ùå Error en Service Worker:",t),isHTMLRequest(e)?await getOfflinePage():new Response("Recurso no disponible offline",{status:503,statusText:"Service Unavailable"})}}async function cacheFirst(e,t){const n=await caches.match(e);if(n)return n;const a=await fetch(e);if(a.ok){(await caches.open(t)).put(e,a.clone())}return a}async function networkFirst(e,t){try{const n=await fetch(e);if(n.ok){(await caches.open(t)).put(e,n.clone())}return n}catch(t){const n=await caches.match(e);if(n)return n;throw t}}async function staleWhileRevalidate(e,t){const n=await caches.match(e),a=fetch(e).then(n=>{if(n.ok){caches.open(t).then(t=>t.put(e,n.clone()))}return n});return n||a}async function getOfflinePage(){const e=await caches.open("static-v1"),t=await e.match("/index.html");return t||new Response('\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Reserva Tu Cancha - Sin Conexi√≥n</title>\n      <meta charset="utf-8">\n      <meta name="viewport" content="width=device-width, initial-scale=1">\n      <style>\n        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }\n        .offline { color: #666; }\n        .icon { font-size: 48px; margin-bottom: 20px; }\n      </style>\n    </head>\n    <body>\n      <div class="offline">\n        <div class="icon">üì±</div>\n        <h1>Sin Conexi√≥n</h1>\n        <p>No hay conexi√≥n a internet. Algunas funciones pueden no estar disponibles.</p>\n        <p>Intenta recargar la p√°gina cuando tengas conexi√≥n.</p>\n      </div>\n    </body>\n    </html>\n  ',{headers:{"Content-Type":"text/html"}})}function isStaticAsset(e){return e.match(/\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$/)}function isHTMLRequest(e){return e.headers.get("accept").includes("text/html")}function isAPIRequest(e){return e.startsWith("/api/")}async function cleanOldCaches(){const e=await caches.keys(),t=["static-v1","dynamic-v1"],n=e.filter(e=>!t.includes(e)).map(e=>caches.delete(e));await Promise.all(n)}self.addEventListener("install",e=>{e.waitUntil(caches.open("static-v1").then(e=>e.addAll(STATIC_ASSETS)).then(()=>self.skipWaiting()).catch(e=>{console.error("‚ùå Error instalando Service Worker:",e)}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.map(e=>{if("static-v1"!==e&&"dynamic-v1"!==e)return caches.delete(e)}))).then(()=>self.clients.claim()))}),self.addEventListener("fetch",e=>{const{request:t}=e;new URL(t.url).origin===location.origin&&"GET"===t.method&&e.respondWith(handleRequest(t))}),self.addEventListener("message",e=>{e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting(),e.data&&"GET_VERSION"===e.data.type&&e.ports[0].postMessage({version:CACHE_NAME})}),self.addEventListener("message",e=>{e.data&&"CLEAN_CACHE"===e.data.type&&cleanOldCaches()});
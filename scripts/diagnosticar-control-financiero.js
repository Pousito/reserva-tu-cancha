#!/usr/bin/env node

/**
 * üîç DIAGN√ìSTICO CONTROL FINANCIERO AUTOM√ÅTICO
 * 
 * Este script diagnostica por qu√© no funciona el control financiero
 * autom√°tico en producci√≥n despu√©s de realizar una reserva.
 */

const { Pool } = require('pg');
require('dotenv').config();

class ControlFinancieroDiagnostico {
    constructor() {
        this.pool = null;
        this.isProduction = process.env.NODE_ENV === 'production';
    }

    async conectar() {
        try {
            this.pool = new Pool({
                connectionString: process.env.DATABASE_URL,
                ssl: this.isProduction ? { rejectUnauthorized: false } : false
            });

            console.log('‚úÖ Conectado a la base de datos');
            console.log(`üìç Entorno: ${this.isProduction ? 'PRODUCCI√ìN' : 'DESARROLLO'}`);
            console.log(`üîó URL: ${process.env.DATABASE_URL?.substring(0, 50)}...`);
            
        } catch (error) {
            console.error('‚ùå Error conectando a la base de datos:', error.message);
            process.exit(1);
        }
    }

    async verificarTriggers() {
        console.log('\nüîç VERIFICANDO TRIGGERS...');
        
        try {
            const query = `
                SELECT 
                    trigger_name,
                    event_manipulation,
                    event_object_table,
                    action_timing,
                    action_statement
                FROM information_schema.triggers
                WHERE trigger_name LIKE '%reserva%ingresos%'
                ORDER BY trigger_name;
            `;
            
            const result = await this.pool.query(query);
            
            if (result.rows.length === 0) {
                console.log('‚ùå NO SE ENCONTRARON TRIGGERS DE SINCRONIZACI√ìN');
                console.log('   Los triggers no est√°n instalados en la base de datos');
                return false;
            }
            
            console.log('‚úÖ Triggers encontrados:');
            result.rows.forEach(row => {
                console.log(`   ‚Ä¢ ${row.trigger_name} - ${row.event_manipulation} en ${row.event_object_table}`);
            });
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error verificando triggers:', error.message);
            return false;
        }
    }

    async verificarFunciones() {
        console.log('\nüîç VERIFICANDO FUNCIONES...');
        
        try {
            const query = `
                SELECT 
                    routine_name,
                    routine_type,
                    data_type
                FROM information_schema.routines
                WHERE routine_name LIKE '%reserva%ingresos%'
                ORDER BY routine_name;
            `;
            
            const result = await this.pool.query(query);
            
            if (result.rows.length === 0) {
                console.log('‚ùå NO SE ENCONTRARON FUNCIONES DE SINCRONIZACI√ìN');
                return false;
            }
            
            console.log('‚úÖ Funciones encontradas:');
            result.rows.forEach(row => {
                console.log(`   ‚Ä¢ ${row.routine_name} (${row.routine_type})`);
            });
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error verificando funciones:', error.message);
            return false;
        }
    }

    async verificarCategorias() {
        console.log('\nüîç VERIFICANDO CATEGOR√çAS...');
        
        try {
            // Verificar categor√≠as de ingresos
            const ingresosQuery = `
                SELECT 
                    cg.id,
                    cg.nombre,
                    cg.complejo_id,
                    c.nombre as complejo_nombre,
                    COUNT(gi.id) as movimientos_count
                FROM categorias_gastos cg
                LEFT JOIN gastos_ingresos gi ON cg.id = gi.categoria_id
                LEFT JOIN complejos c ON cg.complejo_id = c.id
                WHERE cg.tipo = 'ingreso'
                GROUP BY cg.id, cg.nombre, cg.complejo_id, c.nombre
                ORDER BY cg.complejo_id, cg.nombre;
            `;
            
            const ingresos = await this.pool.query(ingresosQuery);
            
            // Verificar categor√≠as de gastos (comisi√≥n)
            const gastosQuery = `
                SELECT 
                    cg.id,
                    cg.nombre,
                    cg.complejo_id,
                    c.nombre as complejo_nombre,
                    COUNT(gi.id) as movimientos_count
                FROM categorias_gastos cg
                LEFT JOIN gastos_ingresos gi ON cg.id = gi.categoria_id
                LEFT JOIN complejos c ON cg.complejo_id = c.id
                WHERE cg.tipo = 'gasto'
                GROUP BY cg.id, cg.nombre, cg.complejo_id, c.nombre
                ORDER BY cg.complejo_id, cg.nombre;
            `;
            
            const gastos = await this.pool.query(gastosQuery);
            
            console.log('üìä CATEGOR√çAS DE INGRESOS:');
            if (ingresos.rows.length === 0) {
                console.log('   ‚ùå No hay categor√≠as de ingresos');
            } else {
                ingresos.rows.forEach(row => {
                    console.log(`   ‚Ä¢ ${row.nombre} (Complejo: ${row.complejo_nombre}) - ${row.movimientos_count} movimientos`);
                });
            }
            
            console.log('\nüìä CATEGOR√çAS DE GASTOS:');
            if (gastos.rows.length === 0) {
                console.log('   ‚ùå No hay categor√≠as de gastos');
            } else {
                gastos.rows.forEach(row => {
                    console.log(`   ‚Ä¢ ${row.nombre} (Complejo: ${row.complejo_nombre}) - ${row.movimientos_count} movimientos`);
                });
            }
            
            // Verificar espec√≠ficamente las categor√≠as necesarias
            const necesariasQuery = `
                SELECT 
                    cg.nombre,
                    cg.tipo,
                    cg.complejo_id,
                    c.nombre as complejo_nombre
                FROM categorias_gastos cg
                LEFT JOIN complejos c ON cg.complejo_id = c.id
                WHERE (cg.nombre = 'Reservas Web' AND cg.tipo = 'ingreso')
                   OR (cg.nombre = 'Comisi√≥n Plataforma' AND cg.tipo = 'gasto')
                ORDER BY cg.complejo_id, cg.tipo;
            `;
            
            const necesarias = await this.pool.query(necesariasQuery);
            
            console.log('\nüéØ CATEGOR√çAS NECESARIAS PARA SINCRONIZACI√ìN:');
            if (necesarias.rows.length === 0) {
                console.log('   ‚ùå NO EXISTEN las categor√≠as necesarias para la sincronizaci√≥n');
                console.log('   Se necesitan:');
                console.log('     ‚Ä¢ "Reservas Web" (tipo: ingreso)');
                console.log('     ‚Ä¢ "Comisi√≥n Plataforma" (tipo: gasto)');
                return false;
            } else {
                necesarias.rows.forEach(row => {
                    console.log(`   ‚úÖ ${row.nombre} (${row.tipo}) - Complejo: ${row.complejo_nombre}`);
                });
                return true;
            }
            
        } catch (error) {
            console.error('‚ùå Error verificando categor√≠as:', error.message);
            return false;
        }
    }

    async revisarUltimaReserva() {
        console.log('\nüîç REVISANDO √öLTIMA RESERVA...');
        
        try {
            const query = `
                SELECT 
                    r.id,
                    r.codigo_reserva,
                    r.estado,
                    r.precio_total,
                    r.comision_aplicada,
                    r.tipo_reserva,
                    r.fecha,
                    r.hora_inicio,
                    r.hora_fin,
                    c.nombre as cancha_nombre,
                    comp.nombre as complejo_nombre,
                    r.created_at
                FROM reservas r
                LEFT JOIN canchas c ON r.cancha_id = c.id
                LEFT JOIN complejos comp ON c.complejo_id = comp.id
                ORDER BY r.created_at DESC
                LIMIT 5;
            `;
            
            const result = await this.pool.query(query);
            
            if (result.rows.length === 0) {
                console.log('   ‚ùå No hay reservas en el sistema');
                return;
            }
            
            console.log('üìã √öLTIMAS 5 RESERVAS:');
            result.rows.forEach((row, index) => {
                console.log(`\n   ${index + 1}. Reserva #${row.codigo_reserva}`);
                console.log(`      Estado: ${row.estado}`);
                console.log(`      Precio: $${row.precio_total || 0}`);
                console.log(`      Comisi√≥n: $${row.comision_aplicada || 0}`);
                console.log(`      Tipo: ${row.tipo_reserva}`);
                console.log(`      Cancha: ${row.cancha_nombre}`);
                console.log(`      Complejo: ${row.complejo_nombre}`);
                console.log(`      Fecha: ${row.fecha} ${row.hora_inicio}-${row.hora_fin}`);
                console.log(`      Creada: ${row.created_at}`);
            });
            
            // Verificar si hay movimientos financieros para la √∫ltima reserva
            if (result.rows.length > 0) {
                const ultimaReserva = result.rows[0];
                await this.verificarMovimientosReserva(ultimaReserva.codigo_reserva);
            }
            
        } catch (error) {
            console.error('‚ùå Error revisando √∫ltima reserva:', error.message);
        }
    }

    async verificarMovimientosReserva(codigoReserva) {
        console.log(`\nüîç VERIFICANDO MOVIMIENTOS PARA RESERVA #${codigoReserva}...`);
        
        try {
            const query = `
                SELECT 
                    gi.id,
                    gi.tipo,
                    gi.monto,
                    gi.descripcion,
                    gi.fecha,
                    cg.nombre as categoria_nombre
                FROM gastos_ingresos gi
                LEFT JOIN categorias_gastos cg ON gi.categoria_id = cg.id
                WHERE gi.descripcion LIKE '%Reserva #${codigoReserva}%'
                ORDER BY gi.tipo, gi.fecha;
            `;
            
            const result = await this.pool.query(query);
            
            if (result.rows.length === 0) {
                console.log(`   ‚ùå NO HAY MOVIMIENTOS FINANCIEROS para la reserva #${codigoReserva}`);
                console.log('   Esto confirma que la sincronizaci√≥n autom√°tica NO est√° funcionando');
                return false;
            }
            
            console.log(`   ‚úÖ MOVIMIENTOS ENCONTRADOS para reserva #${codigoReserva}:`);
            result.rows.forEach(row => {
                console.log(`      ‚Ä¢ ${row.tipo.toUpperCase()}: $${row.monto} - ${row.categoria_nombre}`);
                console.log(`        Descripci√≥n: ${row.descripcion}`);
                console.log(`        Fecha: ${row.fecha}`);
            });
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error verificando movimientos de reserva:', error.message);
            return false;
        }
    }

    async ejecutarSincronizacionManual() {
        console.log('\nüîß EJECUTANDO SINCRONIZACI√ìN MANUAL...');
        
        try {
            // Buscar reservas confirmadas sin movimientos financieros
            const query = `
                SELECT 
                    r.id,
                    r.codigo_reserva,
                    r.precio_total,
                    r.comision_aplicada,
                    r.fecha,
                    r.tipo_reserva,
                    c.complejo_id,
                    c.nombre as cancha_nombre
                FROM reservas r
                LEFT JOIN canchas c ON r.cancha_id = c.id
                WHERE r.estado = 'confirmada'
                AND r.precio_total > 0
                AND NOT EXISTS (
                    SELECT 1 FROM gastos_ingresos gi
                    WHERE gi.descripcion LIKE '%Reserva #' || r.codigo_reserva || '%'
                )
                ORDER BY r.created_at DESC
                LIMIT 10;
            `;
            
            const reservasSinSincronizar = await this.pool.query(query);
            
            if (reservasSinSincronizar.rows.length === 0) {
                console.log('   ‚úÖ No hay reservas pendientes de sincronizaci√≥n');
                return;
            }
            
            console.log(`   üìã Encontradas ${reservasSinSincronizar.rows.length} reservas sin sincronizar:`);
            
            for (const reserva of reservasSinSincronizar.rows) {
                console.log(`\n   üîÑ Sincronizando reserva #${reserva.codigo_reserva}...`);
                
                // Buscar categor√≠as para este complejo
                const categoriasQuery = `
                    SELECT id, tipo, nombre
                    FROM categorias_gastos
                    WHERE complejo_id = $1
                    AND ((tipo = 'ingreso' AND nombre = 'Reservas Web')
                         OR (tipo = 'gasto' AND nombre = 'Comisi√≥n Plataforma'));
                `;
                
                const categorias = await this.pool.query(categoriasQuery, [reserva.complejo_id]);
                
                if (categorias.rows.length < 2) {
                    console.log(`      ‚ùå Faltan categor√≠as para complejo ${reserva.complejo_id}`);
                    continue;
                }
                
                const categoriaIngreso = categorias.rows.find(c => c.tipo === 'ingreso');
                const categoriaGasto = categorias.rows.find(c => c.tipo === 'gasto');
                
                // Insertar ingreso
                const insertIngresoQuery = `
                    INSERT INTO gastos_ingresos (
                        complejo_id, categoria_id, tipo, monto, fecha, descripcion, metodo_pago
                    ) VALUES ($1, $2, 'ingreso', $3, $4, $5, 'automatico')
                    RETURNING id;
                `;
                
                const descripcionIngreso = `Reserva #${reserva.codigo_reserva} - ${reserva.cancha_nombre}`;
                
                const ingresoResult = await this.pool.query(insertIngresoQuery, [
                    reserva.complejo_id,
                    categoriaIngreso.id,
                    reserva.precio_total,
                    reserva.fecha,
                    descripcionIngreso
                ]);
                
                console.log(`      ‚úÖ Ingreso creado: $${reserva.precio_total}`);
                
                // Insertar gasto de comisi√≥n si existe
                if (reserva.comision_aplicada > 0) {
                    const tipoReservaTexto = reserva.tipo_reserva === 'directa' ? 
                        'Web (3.5% + IVA)' : 'Admin (1.75% + IVA)';
                    
                    const insertGastoQuery = `
                        INSERT INTO gastos_ingresos (
                            complejo_id, categoria_id, tipo, monto, fecha, descripcion, metodo_pago
                        ) VALUES ($1, $2, 'gasto', $3, $4, $5, 'automatico')
                        RETURNING id;
                    `;
                    
                    const descripcionGasto = `Comisi√≥n Reserva #${reserva.codigo_reserva} - ${tipoReservaTexto}`;
                    
                    const gastoResult = await this.pool.query(insertGastoQuery, [
                        reserva.complejo_id,
                        categoriaGasto.id,
                        reserva.comision_aplicada,
                        reserva.fecha,
                        descripcionGasto
                    ]);
                    
                    console.log(`      ‚úÖ Comisi√≥n creada: $${reserva.comision_aplicada}`);
                }
            }
            
        } catch (error) {
            console.error('‚ùå Error ejecutando sincronizaci√≥n manual:', error.message);
        }
    }

    async generarReporte() {
        console.log('\nüìä GENERANDO REPORTE FINAL...');
        
        try {
            const query = `
                SELECT 
                    COUNT(*) as total_reservas,
                    COUNT(CASE WHEN estado = 'confirmada' THEN 1 END) as reservas_confirmadas,
                    COUNT(CASE WHEN estado = 'cancelada' THEN 1 END) as reservas_canceladas,
                    SUM(CASE WHEN estado = 'confirmada' THEN precio_total ELSE 0 END) as total_ingresos_reservas,
                    SUM(CASE WHEN estado = 'confirmada' THEN comision_aplicada ELSE 0 END) as total_comisiones
                FROM reservas;
            `;
            
            const reservas = await this.pool.query(query);
            
            const movimientosQuery = `
                SELECT 
                    COUNT(*) as total_movimientos,
                    COUNT(CASE WHEN tipo = 'ingreso' THEN 1 END) as total_ingresos,
                    COUNT(CASE WHEN tipo = 'gasto' THEN 1 END) as total_gastos,
                    SUM(CASE WHEN tipo = 'ingreso' THEN monto ELSE 0 END) as suma_ingresos,
                    SUM(CASE WHEN tipo = 'gasto' THEN monto ELSE 0 END) as suma_gastos
                FROM gastos_ingresos;
            `;
            
            const movimientos = await this.pool.query(movimientosQuery);
            
            console.log('\nüìà ESTAD√çSTICAS DEL SISTEMA:');
            console.log(`   üìã Total de reservas: ${reservas.rows[0].total_reservas}`);
            console.log(`   ‚úÖ Reservas confirmadas: ${reservas.rows[0].reservas_confirmadas}`);
            console.log(`   ‚ùå Reservas canceladas: ${reservas.rows[0].reservas_canceladas}`);
            console.log(`   üí∞ Ingresos por reservas: $${reservas.rows[0].total_ingresos_reservas || 0}`);
            console.log(`   üí∏ Comisiones por reservas: $${reservas.rows[0].total_comisiones || 0}`);
            
            console.log(`\nüí≥ MOVIMIENTOS FINANCIEROS:`);
            console.log(`   üìä Total movimientos: ${movimientos.rows[0].total_movimientos}`);
            console.log(`   üí∞ Total ingresos: $${movimientos.rows[0].suma_ingresos || 0}`);
            console.log(`   üí∏ Total gastos: $${movimientos.rows[0].suma_gastos || 0}`);
            console.log(`   üìà Balance: $${(movimientos.rows[0].suma_ingresos || 0) - (movimientos.rows[0].suma_gastos || 0)}`);
            
        } catch (error) {
            console.error('‚ùå Error generando reporte:', error.message);
        }
    }

    async cerrar() {
        if (this.pool) {
            await this.pool.end();
            console.log('\n‚úÖ Conexi√≥n cerrada');
        }
    }

    async diagnosticar() {
        console.log('üîç DIAGN√ìSTICO DEL CONTROL FINANCIERO AUTOM√ÅTICO');
        console.log('=' .repeat(60));
        
        await this.conectar();
        
        // Verificaciones principales
        const triggersOk = await this.verificarTriggers();
        const funcionesOk = await this.verificarFunciones();
        const categoriasOk = await this.verificarCategorias();
        
        await this.revisarUltimaReserva();
        
        // Resumen del diagn√≥stico
        console.log('\nüéØ RESUMEN DEL DIAGN√ìSTICO:');
        console.log('=' .repeat(40));
        
        if (!triggersOk) {
            console.log('‚ùå PROBLEMA PRINCIPAL: Los triggers no est√°n instalados');
            console.log('   SOLUCI√ìN: Ejecutar el script de sincronizaci√≥n de reservas');
        } else if (!categoriasOk) {
            console.log('‚ùå PROBLEMA PRINCIPAL: Faltan las categor√≠as necesarias');
            console.log('   SOLUCI√ìN: Crear las categor√≠as "Reservas Web" y "Comisi√≥n Plataforma"');
        } else {
            console.log('‚úÖ El sistema parece estar configurado correctamente');
            console.log('   El problema puede ser temporal o espec√≠fico de ciertas reservas');
        }
        
        // Preguntar si ejecutar sincronizaci√≥n manual
        console.log('\nüîß ¬øDeseas ejecutar sincronizaci√≥n manual? (y/n)');
        
        // En un entorno automatizado, ejecutar directamente
        await this.ejecutarSincronizacionManual();
        
        await this.generarReporte();
        await this.cerrar();
    }
}

// Ejecutar diagn√≥stico
if (require.main === module) {
    const diagnostico = new ControlFinancieroDiagnostico();
    diagnostico.diagnosticar().catch(console.error);
}

module.exports = ControlFinancieroDiagnostico;



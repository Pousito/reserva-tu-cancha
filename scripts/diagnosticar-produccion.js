#!/usr/bin/env node

/**
 * üîç DIAGN√ìSTICO CONTROL FINANCIERO EN PRODUCCI√ìN
 * 
 * Este script diagnostica el control financiero autom√°tico
 * espec√≠ficamente en el entorno de producci√≥n (Render).
 */

const { Pool } = require('pg');

// Configurar para producci√≥n
process.env.NODE_ENV = 'production';
require('dotenv').config();

class ProduccionDiagnostico {
    constructor() {
        this.pool = null;
    }

    async conectar() {
        try {
            console.log('üîó Conectando a PRODUCCI√ìN (Render)...');
            console.log(`üìç URL: ${process.env.DATABASE_URL?.substring(0, 30)}...`);
            
            this.pool = new Pool({
                connectionString: process.env.DATABASE_URL,
                ssl: { rejectUnauthorized: false }
            });

            // Verificar conexi√≥n
            const client = await this.pool.connect();
            const result = await client.query('SELECT NOW() as server_time');
            client.release();
            
            console.log('‚úÖ Conectado a PRODUCCI√ìN');
            console.log(`üïê Hora del servidor: ${result.rows[0].server_time}`);
            
        } catch (error) {
            console.error('‚ùå Error conectando a producci√≥n:', error.message);
            process.exit(1);
        }
    }

    async verificarTriggersProduccion() {
        console.log('\nüîç VERIFICANDO TRIGGERS EN PRODUCCI√ìN...');
        
        try {
            const query = `
                SELECT 
                    trigger_name,
                    event_manipulation,
                    event_object_table,
                    action_timing,
                    action_statement
                FROM information_schema.triggers
                WHERE trigger_name LIKE '%reserva%ingresos%'
                ORDER BY trigger_name;
            `;
            
            const result = await this.pool.query(query);
            
            if (result.rows.length === 0) {
                console.log('‚ùå NO SE ENCONTRARON TRIGGERS EN PRODUCCI√ìN');
                console.log('   PROBLEMA: Los triggers no est√°n instalados en la base de datos de producci√≥n');
                return false;
            }
            
            console.log('‚úÖ Triggers encontrados en producci√≥n:');
            result.rows.forEach(row => {
                console.log(`   ‚Ä¢ ${row.trigger_name} - ${row.event_manipulation} en ${row.event_object_table}`);
            });
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error verificando triggers en producci√≥n:', error.message);
            return false;
        }
    }

    async verificarCategoriasProduccion() {
        console.log('\nüîç VERIFICANDO CATEGOR√çAS EN PRODUCCI√ìN...');
        
        try {
            // Verificar categor√≠as necesarias para sincronizaci√≥n
            const query = `
                SELECT 
                    cg.nombre,
                    cg.tipo,
                    cg.complejo_id,
                    c.nombre as complejo_nombre,
                    COUNT(gi.id) as movimientos_count
                FROM categorias_gastos cg
                LEFT JOIN gastos_ingresos gi ON cg.id = gi.categoria_id
                LEFT JOIN complejos c ON cg.complejo_id = c.id
                WHERE (cg.nombre = 'Reservas Web' AND cg.tipo = 'ingreso')
                   OR (cg.nombre = 'Comisi√≥n Plataforma' AND cg.tipo = 'gasto')
                GROUP BY cg.id, cg.nombre, cg.tipo, cg.complejo_id, c.nombre
                ORDER BY cg.complejo_id, cg.tipo;
            `;
            
            const result = await this.pool.query(query);
            
            if (result.rows.length === 0) {
                console.log('‚ùå NO HAY CATEGOR√çAS NECESARIAS EN PRODUCCI√ìN');
                console.log('   PROBLEMA: Faltan las categor√≠as "Reservas Web" y "Comisi√≥n Plataforma"');
                return false;
            }
            
            console.log('üìä CATEGOR√çAS NECESARIAS EN PRODUCCI√ìN:');
            result.rows.forEach(row => {
                console.log(`   ‚úÖ ${row.nombre} (${row.tipo}) - Complejo: ${row.complejo_nombre || 'NULL'} - ${row.movimientos_count} movimientos`);
            });
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error verificando categor√≠as en producci√≥n:', error.message);
            return false;
        }
    }

    async revisarReservasRecientesProduccion() {
        console.log('\nüîç REVISANDO RESERVAS RECIENTES EN PRODUCCI√ìN...');
        
        try {
            const query = `
                SELECT 
                    r.id,
                    r.codigo_reserva,
                    r.estado,
                    r.precio_total,
                    r.comision_aplicada,
                    r.tipo_reserva,
                    r.fecha,
                    r.hora_inicio,
                    r.hora_fin,
                    c.nombre as cancha_nombre,
                    comp.nombre as complejo_nombre,
                    r.created_at
                FROM reservas r
                LEFT JOIN canchas c ON r.cancha_id = c.id
                LEFT JOIN complejos comp ON c.complejo_id = comp.id
                WHERE r.created_at >= NOW() - INTERVAL '7 days'
                ORDER BY r.created_at DESC
                LIMIT 10;
            `;
            
            const result = await this.pool.query(query);
            
            if (result.rows.length === 0) {
                console.log('   ‚ö†Ô∏è No hay reservas en los √∫ltimos 7 d√≠as');
                return;
            }
            
            console.log('üìã RESERVAS DE LOS √öLTIMOS 7 D√çAS:');
            result.rows.forEach((row, index) => {
                console.log(`\n   ${index + 1}. Reserva #${row.codigo_reserva}`);
                console.log(`      Estado: ${row.estado}`);
                console.log(`      Precio: $${row.precio_total || 0}`);
                console.log(`      Comisi√≥n: $${row.comision_aplicada || 0}`);
                console.log(`      Complejo: ${row.complejo_nombre}`);
                console.log(`      Fecha: ${row.fecha} ${row.hora_inicio}-${row.hora_fin}`);
                console.log(`      Creada: ${row.created_at}`);
                
                // Verificar si tiene movimientos financieros
                this.verificarMovimientosReserva(row.codigo_reserva);
            });
            
        } catch (error) {
            console.error('‚ùå Error revisando reservas en producci√≥n:', error.message);
        }
    }

    async verificarMovimientosReserva(codigoReserva) {
        try {
            const query = `
                SELECT 
                    gi.tipo,
                    gi.monto,
                    gi.descripcion,
                    cg.nombre as categoria_nombre
                FROM gastos_ingresos gi
                LEFT JOIN categorias_gastos cg ON gi.categoria_id = cg.id
                WHERE gi.descripcion LIKE '%Reserva #${codigoReserva}%'
                ORDER BY gi.tipo;
            `;
            
            const result = await this.pool.query(query);
            
            if (result.rows.length === 0) {
                console.log(`      ‚ùå SIN MOVIMIENTOS FINANCIEROS`);
                return false;
            }
            
            console.log(`      ‚úÖ CON MOVIMIENTOS:`);
            result.rows.forEach(row => {
                console.log(`         ‚Ä¢ ${row.tipo.toUpperCase()}: $${row.monto} - ${row.categoria_nombre}`);
            });
            
            return true;
            
        } catch (error) {
            console.error(`‚ùå Error verificando movimientos de reserva #${codigoReserva}:`, error.message);
            return false;
        }
    }

    async instalarTriggersSiFaltan() {
        console.log('\nüîß VERIFICANDO SI NECESITA INSTALAR TRIGGERS...');
        
        const triggersExisten = await this.verificarTriggersProduccion();
        
        if (!triggersExisten) {
            console.log('\nüöÄ INSTALANDO TRIGGERS EN PRODUCCI√ìN...');
            
            try {
                // Leer el script de sincronizaci√≥n
                const fs = require('fs');
                const path = require('path');
                const scriptPath = path.join(__dirname, 'sql', 'sincronizar-reservas-ingresos.sql');
                
                if (fs.existsSync(scriptPath)) {
                    const script = fs.readFileSync(scriptPath, 'utf8');
                    
                    // Ejecutar el script
                    await this.pool.query(script);
                    
                    console.log('‚úÖ Triggers instalados correctamente en producci√≥n');
                    return true;
                } else {
                    console.log('‚ùå No se encontr√≥ el script de sincronizaci√≥n');
                    return false;
                }
                
            } catch (error) {
                console.error('‚ùå Error instalando triggers:', error.message);
                return false;
            }
        }
        
        return true;
    }

    async crearCategoriasSiFaltan() {
        console.log('\nüîß VERIFICANDO SI NECESITA CREAR CATEGOR√çAS...');
        
        try {
            // Verificar si existen categor√≠as para alg√∫n complejo
            const query = `
                SELECT DISTINCT cg.complejo_id, c.nombre as complejo_nombre
                FROM categorias_gastos cg
                LEFT JOIN complejos c ON cg.complejo_id = c.id
                WHERE cg.nombre IN ('Reservas Web', 'Comisi√≥n Plataforma')
                GROUP BY cg.complejo_id, c.nombre;
            `;
            
            const complejosConCategorias = await this.pool.query(query);
            
            // Obtener todos los complejos
            const todosComplejos = await this.pool.query('SELECT id, nombre FROM complejos ORDER BY id');
            
            console.log(`üìä Complejos con categor√≠as: ${complejosConCategorias.rows.length}`);
            console.log(`üìä Total de complejos: ${todosComplejos.rows.length}`);
            
            if (complejosConCategorias.rows.length < todosComplejos.rows.length) {
                console.log('üöÄ CREANDO CATEGOR√çAS FALTANTES...');
                
                for (const complejo of todosComplejos.rows) {
                    const tieneCategorias = complejosConCategorias.rows.some(c => c.complejo_id === complejo.id);
                    
                    if (!tieneCategorias) {
                        console.log(`   üìù Creando categor√≠as para: ${complejo.nombre}`);
                        
                        // Crear categor√≠a de ingresos
                        await this.pool.query(`
                            INSERT INTO categorias_gastos (complejo_id, nombre, descripcion, icono, color, tipo, es_predefinida)
                            VALUES ($1, 'Reservas Web', 'Reservas realizadas a trav√©s de la plataforma web', 'fas fa-globe', '#28a745', 'ingreso', true)
                            ON CONFLICT (nombre, complejo_id) DO NOTHING;
                        `, [complejo.id]);
                        
                        // Crear categor√≠a de comisi√≥n
                        await this.pool.query(`
                            INSERT INTO categorias_gastos (complejo_id, nombre, descripcion, icono, color, tipo, es_predefinida)
                            VALUES ($1, 'Comisi√≥n Plataforma', 'Comisi√≥n cobrada por la plataforma por reservas web', 'fas fa-percentage', '#dc3545', 'gasto', true)
                            ON CONFLICT (nombre, complejo_id) DO NOTHING;
                        `, [complejo.id]);
                        
                        console.log(`      ‚úÖ Categor√≠as creadas para ${complejo.nombre}`);
                    }
                }
                
                console.log('‚úÖ Proceso de creaci√≥n de categor√≠as completado');
            } else {
                console.log('‚úÖ Todos los complejos ya tienen las categor√≠as necesarias');
            }
            
        } catch (error) {
            console.error('‚ùå Error creando categor√≠as:', error.message);
        }
    }

    async sincronizarReservasPendientes() {
        console.log('\nüîÑ SINCRONIZANDO RESERVAS PENDIENTES EN PRODUCCI√ìN...');
        
        try {
            // Buscar reservas confirmadas sin movimientos financieros
            const query = `
                SELECT 
                    r.id,
                    r.codigo_reserva,
                    r.precio_total,
                    r.comision_aplicada,
                    r.fecha,
                    r.tipo_reserva,
                    c.complejo_id,
                    c.nombre as cancha_nombre
                FROM reservas r
                LEFT JOIN canchas c ON r.cancha_id = c.id
                WHERE r.estado = 'confirmada'
                AND r.precio_total > 0
                AND NOT EXISTS (
                    SELECT 1 FROM gastos_ingresos gi
                    WHERE gi.descripcion LIKE '%Reserva #' || r.codigo_reserva || '%'
                )
                ORDER BY r.created_at DESC;
            `;
            
            const reservasSinSincronizar = await this.pool.query(query);
            
            if (reservasSinSincronizar.rows.length === 0) {
                console.log('   ‚úÖ No hay reservas pendientes de sincronizaci√≥n');
                return;
            }
            
            console.log(`   üìã Encontradas ${reservasSinSincronizar.rows.length} reservas sin sincronizar`);
            
            for (const reserva of reservasSinSincronizar.rows) {
                console.log(`\n   üîÑ Sincronizando reserva #${reserva.codigo_reserva}...`);
                
                // Buscar categor√≠as para este complejo
                const categoriasQuery = `
                    SELECT id, tipo, nombre
                    FROM categorias_gastos
                    WHERE complejo_id = $1
                    AND ((tipo = 'ingreso' AND nombre = 'Reservas Web')
                         OR (tipo = 'gasto' AND nombre = 'Comisi√≥n Plataforma'));
                `;
                
                const categorias = await this.pool.query(categoriasQuery, [reserva.complejo_id]);
                
                if (categorias.rows.length < 2) {
                    console.log(`      ‚ùå Faltan categor√≠as para complejo ${reserva.complejo_id}`);
                    continue;
                }
                
                const categoriaIngreso = categorias.rows.find(c => c.tipo === 'ingreso');
                const categoriaGasto = categorias.rows.find(c => c.tipo === 'gasto');
                
                // Insertar ingreso
                const insertIngresoQuery = `
                    INSERT INTO gastos_ingresos (
                        complejo_id, categoria_id, tipo, monto, fecha, descripcion, metodo_pago
                    ) VALUES ($1, $2, 'ingreso', $3, $4, $5, 'automatico')
                    RETURNING id;
                `;
                
                const descripcionIngreso = `Reserva #${reserva.codigo_reserva} - ${reserva.cancha_nombre}`;
                
                await this.pool.query(insertIngresoQuery, [
                    reserva.complejo_id,
                    categoriaIngreso.id,
                    reserva.precio_total,
                    reserva.fecha,
                    descripcionIngreso
                ]);
                
                console.log(`      ‚úÖ Ingreso creado: $${reserva.precio_total}`);
                
                // Insertar gasto de comisi√≥n si existe
                if (reserva.comision_aplicada > 0) {
                    const tipoReservaTexto = reserva.tipo_reserva === 'directa' ? 
                        'Web (3.5% + IVA)' : 'Admin (1.75% + IVA)';
                    
                    const insertGastoQuery = `
                        INSERT INTO gastos_ingresos (
                            complejo_id, categoria_id, tipo, monto, fecha, descripcion, metodo_pago
                        ) VALUES ($1, $2, 'gasto', $3, $4, $5, 'automatico')
                        RETURNING id;
                    `;
                    
                    const descripcionGasto = `Comisi√≥n Reserva #${reserva.codigo_reserva} - ${tipoReservaTexto}`;
                    
                    await this.pool.query(insertGastoQuery, [
                        reserva.complejo_id,
                        categoriaGasto.id,
                        reserva.comision_aplicada,
                        reserva.fecha,
                        descripcionGasto
                    ]);
                    
                    console.log(`      ‚úÖ Comisi√≥n creada: $${reserva.comision_aplicada}`);
                }
            }
            
            console.log('\n‚úÖ Sincronizaci√≥n manual completada');
            
        } catch (error) {
            console.error('‚ùå Error en sincronizaci√≥n manual:', error.message);
        }
    }

    async generarReporteProduccion() {
        console.log('\nüìä REPORTE DE PRODUCCI√ìN...');
        
        try {
            const query = `
                SELECT 
                    COUNT(*) as total_reservas,
                    COUNT(CASE WHEN estado = 'confirmada' THEN 1 END) as reservas_confirmadas,
                    SUM(CASE WHEN estado = 'confirmada' THEN precio_total ELSE 0 END) as total_ingresos_reservas,
                    SUM(CASE WHEN estado = 'confirmada' THEN comision_aplicada ELSE 0 END) as total_comisiones
                FROM reservas;
            `;
            
            const reservas = await this.pool.query(query);
            
            const movimientosQuery = `
                SELECT 
                    COUNT(*) as total_movimientos,
                    COUNT(CASE WHEN tipo = 'ingreso' THEN 1 END) as total_ingresos,
                    COUNT(CASE WHEN tipo = 'gasto' THEN 1 END) as total_gastos,
                    SUM(CASE WHEN tipo = 'ingreso' THEN monto ELSE 0 END) as suma_ingresos,
                    SUM(CASE WHEN tipo = 'gasto' THEN monto ELSE 0 END) as suma_gastos
                FROM gastos_ingresos;
            `;
            
            const movimientos = await this.pool.query(movimientosQuery);
            
            console.log('\nüìà ESTAD√çSTICAS DE PRODUCCI√ìN:');
            console.log(`   üìã Total de reservas: ${reservas.rows[0].total_reservas}`);
            console.log(`   ‚úÖ Reservas confirmadas: ${reservas.rows[0].reservas_confirmadas}`);
            console.log(`   üí∞ Ingresos por reservas: $${reservas.rows[0].total_ingresos_reservas || 0}`);
            console.log(`   üí∏ Comisiones por reservas: $${reservas.rows[0].total_comisiones || 0}`);
            
            console.log(`\nüí≥ MOVIMIENTOS FINANCIEROS:`);
            console.log(`   üìä Total movimientos: ${movimientos.rows[0].total_movimientos}`);
            console.log(`   üí∞ Total ingresos: $${movimientos.rows[0].suma_ingresos || 0}`);
            console.log(`   üí∏ Total gastos: $${movimientos.rows[0].suma_gastos || 0}`);
            console.log(`   üìà Balance: $${(movimientos.rows[0].suma_ingresos || 0) - (movimientos.rows[0].suma_gastos || 0)}`);
            
        } catch (error) {
            console.error('‚ùå Error generando reporte:', error.message);
        }
    }

    async cerrar() {
        if (this.pool) {
            await this.pool.end();
            console.log('\n‚úÖ Conexi√≥n a producci√≥n cerrada');
        }
    }

    async diagnosticar() {
        console.log('üîç DIAGN√ìSTICO DE PRODUCCI√ìN - CONTROL FINANCIERO');
        console.log('=' .repeat(60));
        
        await this.conectar();
        
        // Verificaciones principales
        const triggersOk = await this.verificarTriggersProduccion();
        const categoriasOk = await this.verificarCategoriasProduccion();
        
        // Instalar componentes faltantes
        if (!triggersOk) {
            await this.instalarTriggersSiFaltan();
        }
        
        if (!categoriasOk) {
            await this.crearCategoriasSiFaltan();
        }
        
        await this.revisarReservasRecientesProduccion();
        await this.sincronizarReservasPendientes();
        await this.generarReporteProduccion();
        
        // Resumen final
        console.log('\nüéØ RESUMEN DEL DIAGN√ìSTICO DE PRODUCCI√ìN:');
        console.log('=' .repeat(50));
        
        if (!triggersOk) {
            console.log('‚úÖ SOLUCIONADO: Triggers instalados en producci√≥n');
        }
        
        if (!categoriasOk) {
            console.log('‚úÖ SOLUCIONADO: Categor√≠as creadas en producci√≥n');
        }
        
        console.log('‚úÖ El control financiero autom√°tico deber√≠a funcionar ahora');
        console.log('üîÑ Las pr√≥ximas reservas se sincronizar√°n autom√°ticamente');
        
        await this.cerrar();
    }
}

// Ejecutar diagn√≥stico de producci√≥n
if (require.main === module) {
    const diagnostico = new ProduccionDiagnostico();
    diagnostico.diagnosticar().catch(console.error);
}

module.exports = ProduccionDiagnostico;



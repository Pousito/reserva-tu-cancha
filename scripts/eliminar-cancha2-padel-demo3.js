#!/usr/bin/env node

/**
 * Script para eliminar la cancha 2 de p√°del del Complejo Demo 3
 * Fecha: $(date)
 * Descripci√≥n: Elimina la cancha 2 de p√°del, dejando solo una cancha de p√°del
 */

const { Pool } = require('pg');

console.log('üèüÔ∏è ================================================');
console.log('üèüÔ∏è ELIMINANDO CANCHA 2 DE P√ÅDEL - COMPLEJO DEMO 3');
console.log('üèüÔ∏è ================================================');

// Configurar conexi√≥n PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres:Ignacio1234%2A%23@localhost:5432/reserva_tu_cancha_local?sslmode=disable',
  ssl: false
});

async function eliminarCancha2Padel() {
  const client = await pool.connect();
  
  try {
    console.log('\nüîç Verificando complejo Demo 3...');
    
    // Buscar el complejo Demo 3
    const complejoResult = await client.query(
      'SELECT id, nombre FROM complejos WHERE nombre = $1',
      ['Complejo Demo 3']
    );
    
    if (complejoResult.rows.length === 0) {
      console.log('‚ùå Complejo Demo 3 no encontrado');
      return;
    }
    
    const complejo = complejoResult.rows[0];
    console.log(`‚úÖ Complejo encontrado: ${complejo.nombre} (ID: ${complejo.id})`);
    
    // Buscar todas las canchas de p√°del del complejo Demo 3
    console.log('\nüîç Buscando canchas de p√°del en el complejo...');
    const canchasPadel = await client.query(`
      SELECT id, nombre, tipo, precio_hora 
      FROM canchas 
      WHERE complejo_id = $1 AND tipo = 'padel'
      ORDER BY nombre
    `, [complejo.id]);
    
    if (canchasPadel.rows.length === 0) {
      console.log('‚ùå No se encontraron canchas de p√°del en el complejo Demo 3');
      return;
    }
    
    console.log(`üìä Canchas de p√°del encontradas: ${canchasPadel.rows.length}`);
    canchasPadel.rows.forEach((cancha, index) => {
      console.log(`   ${index + 1}. ID: ${cancha.id} - ${cancha.nombre} (${cancha.tipo}) - $${cancha.precio_hora}`);
    });
    
    // Buscar espec√≠ficamente la "cancha 2 de p√°del"
    const cancha2Padel = canchasPadel.rows.find(cancha => 
      cancha.nombre.toLowerCase().includes('cancha 2') || 
      cancha.nombre.toLowerCase().includes('cancha2') ||
      cancha.nombre.toLowerCase().includes('2')
    );
    
    if (!cancha2Padel) {
      console.log('‚ùå No se encontr√≥ "cancha 2 de p√°del" espec√≠ficamente');
      console.log('üí° Canchas de p√°del disponibles:');
      canchasPadel.rows.forEach((cancha, index) => {
        console.log(`   ${index + 1}. ${cancha.nombre} (ID: ${cancha.id})`);
      });
      return;
    }
    
    console.log(`\nüéØ Cancha 2 de p√°del encontrada:`);
    console.log(`   ID: ${cancha2Padel.id}`);
    console.log(`   Nombre: ${cancha2Padel.nombre}`);
    console.log(`   Tipo: ${cancha2Padel.tipo}`);
    console.log(`   Precio: $${cancha2Padel.precio_hora}`);
    
    // Verificar si hay reservas asociadas
    console.log('\nüîç Verificando reservas asociadas...');
    const reservasResult = await client.query(
      'SELECT COUNT(*) as total FROM reservas WHERE cancha_id = $1',
      [cancha2Padel.id]
    );
    
    const totalReservas = parseInt(reservasResult.rows[0].total);
    console.log(`üìä Reservas encontradas: ${totalReservas}`);
    
    if (totalReservas > 0) {
      console.log('‚ö†Ô∏è  ADVERTENCIA: Esta cancha tiene reservas asociadas');
      console.log('üí° Se eliminar√°n tambi√©n las reservas asociadas');
    }
    
    // Confirmar eliminaci√≥n
    console.log('\nüóëÔ∏è  ELIMINANDO CANCHA 2 DE P√ÅDEL...');
    
    // Iniciar transacci√≥n
    await client.query('BEGIN');
    
    try {
      // Eliminar reservas asociadas primero
      if (totalReservas > 0) {
        console.log('üóëÔ∏è  Eliminando reservas asociadas...');
        await client.query('DELETE FROM reservas WHERE cancha_id = $1', [cancha2Padel.id]);
        console.log(`   ‚úÖ ${totalReservas} reservas eliminadas`);
      }
      
      // Eliminar la cancha
      console.log('üóëÔ∏è  Eliminando cancha...');
      await client.query('DELETE FROM canchas WHERE id = $1', [cancha2Padel.id]);
      console.log(`   ‚úÖ Cancha "${cancha2Padel.nombre}" eliminada`);
      
      // Confirmar transacci√≥n
      await client.query('COMMIT');
      
      console.log('\nüéâ ================================================');
      console.log('üéâ CANCHA 2 DE P√ÅDEL ELIMINADA EXITOSAMENTE');
      console.log('üéâ ================================================');
      console.log(`üèüÔ∏è  Complejo: ${complejo.nombre} (ID: ${complejo.id})`);
      console.log(`üóëÔ∏è  Cancha eliminada: ${cancha2Padel.nombre} (ID: ${cancha2Padel.id})`);
      console.log(`üìä Reservas eliminadas: ${totalReservas}`);
      
      // Verificar canchas restantes
      console.log('\nüîç Verificando canchas restantes...');
      const canchasRestantes = await client.query(`
        SELECT id, nombre, tipo, precio_hora 
        FROM canchas 
        WHERE complejo_id = $1
        ORDER BY tipo, nombre
      `, [complejo.id]);
      
      console.log(`üìä Total de canchas restantes: ${canchasRestantes.rows.length}`);
      canchasRestantes.rows.forEach((cancha, index) => {
        console.log(`   ${index + 1}. ${cancha.nombre} (${cancha.tipo}) - $${cancha.precio_hora}`);
      });
      
      console.log('\n‚úÖ El complejo Demo 3 ahora tiene solo una cancha de p√°del');
      
    } catch (error) {
      // Revertir transacci√≥n en caso de error
      await client.query('ROLLBACK');
      throw error;
    }
    
  } catch (error) {
    console.error('\n‚ùå ERROR eliminando cancha:', error.message);
    throw error;
  } finally {
    client.release();
  }
}

// Ejecutar eliminaci√≥n
eliminarCancha2Padel()
  .then(() => {
    console.log('‚úÖ Script completado exitosamente');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error ejecutando script:', error);
    process.exit(1);
  });

#!/usr/bin/env node

/**
 * Script para corregir el rol de MagnaSports de 'admin' a 'owner'
 * Ejecutar: node scripts/fix-magnasports-role.js
 */

const bcrypt = require('bcryptjs');
const DatabaseManager = require('../src/config/database');

async function fixMagnasportsRole() {
    console.log('üè¢ CORRIGIENDO ROL DE MAGNA SPORTS');
    console.log('===================================');
    
    let db;
    
    try {
        // Conectar a la base de datos
        db = new DatabaseManager();
        await db.connect();
        console.log('‚úÖ Conectado a la base de datos');
        
        // Buscar usuario de MagnaSports
        const magnasportsUser = await db.get(
            'SELECT * FROM usuarios WHERE email = $1',
            ['naxiin320@gmail.com']
        );
        
        if (!magnasportsUser) {
            console.log('‚ùå Usuario de MagnaSports no encontrado');
            return;
        }
        
        console.log(`üìß Usuario encontrado: ${magnasportsUser.email}`);
        console.log(`üë§ Nombre: ${magnasportsUser.nombre}`);
        console.log(`üé≠ Rol actual: ${magnasportsUser.rol}`);
        console.log(`üè¢ Complejo ID: ${magnasportsUser.complejo_id}`);
        
        // Verificar si ya tiene rol correcto
        if (magnasportsUser.rol === 'owner') {
            console.log('‚úÖ El usuario ya tiene rol correcto (owner)');
            return;
        }
        
        // Actualizar rol a 'owner'
        const result = await db.run(
            'UPDATE usuarios SET rol = $1, nombre = $2 WHERE email = $3',
            ['owner', 'Due√±o MagnaSports', 'naxiin320@gmail.com']
        );
        
        if (result.changes > 0) {
            console.log('‚úÖ Rol actualizado exitosamente');
            console.log('üé≠ Nuevo rol: owner');
            console.log('üë§ Nuevo nombre: Due√±o MagnaSports');
        } else {
            console.log('‚ùå No se pudo actualizar el rol');
        }
        
        // Verificar el cambio
        const updatedUser = await db.get(
            'SELECT u.*, c.nombre as complejo_nombre FROM usuarios u LEFT JOIN complejos c ON u.complejo_id = c.id WHERE u.email = $1',
            ['naxiin320@gmail.com']
        );
        
        console.log('\nüîç VERIFICACI√ìN FINAL:');
        console.log(`üìß Email: ${updatedUser.email}`);
        console.log(`üë§ Nombre: ${updatedUser.nombre}`);
        console.log(`üé≠ Rol: ${updatedUser.rol}`);
        console.log(`üè¢ Complejo: ${updatedUser.complejo_nombre || 'Sin asignar'}`);
        console.log(`‚úÖ Activo: ${updatedUser.activo ? 'S√≠' : 'No'}`);
        
        console.log('\nüéâ CORRECCI√ìN COMPLETADA');
        console.log('========================');
        console.log('üè¢ MAGNA SPORTS - CREDENCIALES ACTUALIZADAS:');
        console.log('üìß Email: naxiin320@gmail.com');
        console.log('üîë Password: magnasports2024');
        console.log('üé≠ Rol: owner (Due√±o)');
        console.log('üåê URL: https://www.reservatuscanchas.cl/admin-login.html');
        console.log('');
        console.log('üìã PERMISOS ACTUALIZADOS:');
        console.log('   ‚úÖ Ver reportes de MagnaSports');
        console.log('   ‚úÖ Ver ingresos de MagnaSports');
        console.log('   ‚úÖ Gestionar canchas de MagnaSports');
        console.log('   ‚úÖ Gestionar reservas de MagnaSports');
        console.log('   ‚ùå No puede ver otros complejos');
        
    } catch (error) {
        console.error('‚ùå Error corrigiendo rol de MagnaSports:', error);
    } finally {
        if (db) {
            await db.close();
            console.log('\nüîå Conexi√≥n a base de datos cerrada');
        }
    }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
    fixMagnasportsRole()
        .then(() => {
            console.log('\n‚úÖ Script completado exitosamente');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Error ejecutando script:', error);
            process.exit(1);
        });
}

module.exports = fixMagnasportsRole;

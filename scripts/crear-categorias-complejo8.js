const { Pool } = require('pg');
require('dotenv').config();

// Configuraci√≥n para producci√≥n (Render)
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

async function crearCategoriasComplejo8() {
  const client = await pool.connect();
  try {
    console.log('üèóÔ∏è ================================================');
    console.log('üèóÔ∏è CREANDO CATEGOR√çAS FINANCIERAS - COMPLEJO ID 8');
    console.log('üèóÔ∏è ================================================');

    const complejoId = 8; // ID del Complejo Demo 3 (segundo registro)

    // 1. Verificar que el complejo existe
    const complejo = await client.query('SELECT id, nombre FROM complejos WHERE id = $1', [complejoId]);
    if (complejo.rows.length === 0) {
      console.error(`‚ùå Complejo con ID ${complejoId} no encontrado.`);
      return;
    }
    console.log(`‚úÖ Complejo encontrado: ${complejo.rows[0].nombre} (ID: ${complejo.rows[0].id})`);

    // 2. Verificar categor√≠as existentes
    console.log('üîç Verificando categor√≠as existentes...');
    const categoriasExistentes = await client.query(`
      SELECT * FROM categorias_gastos 
      WHERE complejo_id = $1 
      ORDER BY tipo, nombre
    `, [complejoId]);

    console.log(`üìä Categor√≠as existentes: ${categoriasExistentes.rows.length}`);
    categoriasExistentes.rows.forEach(c => {
      console.log(`   - ${c.nombre} (${c.tipo})`);
    });

    // 3. Categor√≠as necesarias para el sistema de reservas
    const categoriasNecesarias = [
      { nombre: 'Reservas Web', tipo: 'ingreso' },
      { nombre: 'Comisi√≥n Plataforma', tipo: 'gasto' }
    ];

    const categoriasCreadas = [];
    const categoriasExistentesNombres = categoriasExistentes.rows.map(c => c.nombre);

    // 4. Crear categor√≠as que no existen
    for (const categoria of categoriasNecesarias) {
      if (!categoriasExistentesNombres.includes(categoria.nombre)) {
        console.log(`‚ûï Creando categor√≠a: ${categoria.nombre} (${categoria.tipo})`);
        
        const result = await client.query(`
          INSERT INTO categorias_gastos (complejo_id, nombre, tipo, descripcion)
          VALUES ($1, $2, $3, $4)
          RETURNING id, nombre, tipo
        `, [
          complejoId,
          categoria.nombre,
          categoria.tipo,
          `Categor√≠a autom√°tica para ${categoria.nombre}`
        ]);
        
        const categoriaCreada = result.rows[0];
        categoriasCreadas.push(categoriaCreada);
        console.log(`‚úÖ Categor√≠a creada: ${categoriaCreada.nombre} (ID: ${categoriaCreada.id})`);
      } else {
        console.log(`‚ö†Ô∏è Categor√≠a ya existe: ${categoria.nombre}`);
      }
    }

    // 5. Verificar categor√≠as finales
    console.log('\nüîç Verificando categor√≠as finales...');
    const categoriasFinales = await client.query(`
      SELECT * FROM categorias_gastos 
      WHERE complejo_id = $1 
      ORDER BY tipo, nombre
    `, [complejoId]);

    console.log(`üìä Total de categor√≠as: ${categoriasFinales.rows.length}`);
    categoriasFinales.rows.forEach(c => {
      console.log(`   ${c.id}. ${c.nombre} (${c.tipo}) - ${c.descripcion}`);
    });

    console.log('\nüéâ ================================================');
    console.log('üéâ CATEGOR√çAS FINANCIERAS CREADAS EXITOSAMENTE');
    console.log('üéâ ================================================');
    console.log(`üèüÔ∏è  Complejo: ${complejo.rows[0].nombre} (ID: ${complejoId})`);
    console.log(`üìä Categor√≠as creadas: ${categoriasCreadas.length}`);
    console.log(`üìä Total categor√≠as: ${categoriasFinales.rows.length}`);

    if (categoriasCreadas.length > 0) {
      console.log('\n‚úÖ Categor√≠as creadas:');
      categoriasCreadas.forEach(c => {
        console.log(`   - ${c.nombre} (${c.tipo}) - ID: ${c.id}`);
      });
    }

    console.log('\nüí° Ahora el sistema podr√° registrar movimientos financieros autom√°ticamente para este complejo');

  } catch (error) {
    console.error('‚ùå Error ejecutando script:', error);
  } finally {
    client.release();
    pool.end();
    console.log('‚úÖ Conexi√≥n cerrada');
  }
}

crearCategoriasComplejo8();


